name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Create environment file
        run: |
          echo "Creating .env file for API service..."
          cat > app/.env << EOF
          # CI/CD Environment Configuration
          ORACLE_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
          RPC_URL=http://blockchain:8545
          EVENT_MANAGER_ADDRESS=0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512
          RESALE_MARKET_ADDRESS=0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0
          TICKET_NFT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3
          REDIS_URL=redis://redis:6379
          SECRET_KEY=github-actions-test-key
          EOF
          echo "Environment file created successfully"
          echo "Contents of .env file:"
          cat app/.env

      - name: Build and start services
        run: |
          echo "Building Docker Compose services with layer caching..."
          # Enable Docker BuildKit for better caching
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1

          # Show Docker system info
          docker system df

          # Build with inline cache for better performance
          docker compose build --parallel --build-arg BUILDKIT_INLINE_CACHE=1
          docker compose up --detach

          # Show cache usage after build
          echo "=== Docker system usage after build ==="
          docker system df

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          # Wait for blockchain to be healthy
          timeout 180s bash -c 'until docker compose ps blockchain | grep -q "healthy"; do echo "Waiting for blockchain..."; sleep 5; done'

          # Wait for API to respond
          timeout 60s bash -c 'until curl -f http://localhost:8000/; do echo "Waiting for API..."; sleep 2; done'

          echo "All services are ready!"

      - name: Check service status
        run: |
          echo "=== Docker Compose Status ==="
          docker compose ps

          echo "=== API Health Check ==="
          curl -f http://localhost:8000/

          echo "=== Blockchain RPC Check ==="
          curl -f http://localhost:8545 -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}'

      - name: Test API Endpoints
        run: |
          echo "=== Testing Create Event Endpoint ==="

          # Test 1: Create an event
          echo "Creating test event..."
          CREATE_RESPONSE=$(curl -s -X POST "http://localhost:8000/events/create" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "GitHub Actions Test Concert",
              "venue": "CI/CD Arena", 
              "date": 1855542728,
              "price": 1000000000000000000,
              "total_tickets": 50
            }')

          echo "Create Event Response: $CREATE_RESPONSE"

          # Check if creation was successful
          if echo "$CREATE_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Event creation successful"
          else
            echo "❌ Event creation failed"
            exit 1
          fi

          echo "=== Testing Buy Tickets Endpoint ==="

          # Test 2: Buy tickets
          echo "Buying tickets..."
          BUY_RESPONSE=$(curl -s -X POST "http://localhost:8000/events/buy" \
            -H "Content-Type: application/json" \
            -d '{
              "event_id": 1,
              "quantity": 2,
              "user_account": 1
            }')

          echo "Buy Tickets Response: $BUY_RESPONSE"

          # Check if ticket purchase was successful
          if echo "$BUY_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Ticket purchase successful"
          else
            echo "❌ Ticket purchase failed"
            exit 1
          fi

          echo "=== Testing Error Handling ==="

          # Test 3: Invalid event creation (negative price)
          echo "Testing invalid event creation..."
          INVALID_RESPONSE=$(curl -s -X POST "http://localhost:8000/events/create" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Invalid Event",
              "venue": "Test Venue",
              "date": 1735689600,
              "price": -100,
              "total_tickets": 10
            }')

          echo "Invalid Event Response: $INVALID_RESPONSE"

          # Should return error for negative price
          if echo "$INVALID_RESPONSE" | grep -q '"detail"'; then
            echo "✅ Error handling working correctly"
          else
            echo "❌ Error handling not working"
            exit 1
          fi

      - name: Test Resale Market Endpoints
        run: |
          echo "=== Testing Resale Market Flow ==="

          # Step 1: Check initial approval status (should be false)
          echo "Checking initial approval status..."
          APPROVAL_STATUS=$(curl -s "http://localhost:8000/market/approval/status?user_account=1")
          echo "Approval Status Response: $APPROVAL_STATUS"

          if echo "$APPROVAL_STATUS" | grep -q '"is_approved":false'; then
            echo "✅ Initial approval status correct (not approved)"
          else
            echo "❌ Initial approval status unexpected"
            exit 1
          fi

          # Step 2: Approve ResaleMarket
          echo "Approving ResaleMarket for user account 1..."
          APPROVE_RESPONSE=$(curl -s -X POST "http://localhost:8000/market/approval/approve" \
            -H "Content-Type: application/json" \
            -d '{"user_account": 1}')

          echo "Approve Response: $APPROVE_RESPONSE"

          if echo "$APPROVE_RESPONSE" | grep -q '"success":true'; then
            echo "✅ ResaleMarket approval successful"
          else
            echo "❌ ResaleMarket approval failed"
            exit 1
          fi

          # Step 3: Verify approval status (should now be true)
          echo "Verifying approval status after approval..."
          APPROVAL_STATUS_AFTER=$(curl -s "http://localhost:8000/market/approval/status?user_account=1")
          echo "Approval Status After Response: $APPROVAL_STATUS_AFTER"

          if echo "$APPROVAL_STATUS_AFTER" | grep -q '"is_approved":true'; then
            echo "✅ Approval status verified (now approved)"
          else
            echo "❌ Approval status not updated correctly"
            exit 1
          fi

          # Step 4: List a ticket for resale
          echo "Listing ticket #1 for resale..."
          LIST_RESPONSE=$(curl -s -X POST "http://localhost:8000/market/list" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 1,
              "price": 1100000000000000000,
              "seller_account": 1
            }')

          echo "List Ticket Response: $LIST_RESPONSE"

          if echo "$LIST_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Ticket listing successful"
          else
            echo "❌ Ticket listing failed"
            exit 1
          fi

          # Step 5: Buy the listed ticket
          echo "Buying listed ticket with user account 2..."
          BUY_RESALE_RESPONSE=$(curl -s -X POST "http://localhost:8000/market/buy" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 1,
              "buyer_account": 2
            }')

          echo "Buy Resale Ticket Response: $BUY_RESALE_RESPONSE"

          if echo "$BUY_RESALE_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Resale ticket purchase successful"
          else
            echo "❌ Resale ticket purchase failed"
            exit 1
          fi

          echo "=== Testing Delist Functionality ==="

          # Step 6: Buy another ticket to test delisting
          echo "Buying another ticket for delisting test..."
          BUY_ANOTHER_RESPONSE=$(curl -s -X POST "http://localhost:8000/events/buy" \
            -H "Content-Type: application/json" \
            -d '{
              "event_id": 1,
              "quantity": 1,
              "user_account": 1
            }')

          echo "Buy Another Ticket Response: $BUY_ANOTHER_RESPONSE"

          if echo "$BUY_ANOTHER_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Additional ticket purchase successful"
          else
            echo "❌ Additional ticket purchase failed"
            exit 1
          fi

          # Step 7: List the new ticket
          echo "Listing ticket #3 for resale..."
          LIST_ANOTHER_RESPONSE=$(curl -s -X POST "http://localhost:8000/market/list" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 3,
              "price": 1200000000000000000,
              "seller_account": 1
            }')

          echo "List Another Ticket Response: $LIST_ANOTHER_RESPONSE"

          if echo "$LIST_ANOTHER_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Second ticket listing successful"
          else
            echo "❌ Second ticket listing failed"
            exit 1
          fi

          # Step 8: Delist the ticket
          echo "Delisting ticket #3..."
          DELIST_RESPONSE=$(curl -s -X POST "http://localhost:8000/market/delist" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 3,
              "seller_account": 1
            }')

          echo "Delist Ticket Response: $DELIST_RESPONSE"

          if echo "$DELIST_RESPONSE" | grep -q '"success":true'; then
            echo "✅ Ticket delisting successful"
          else
            echo "❌ Ticket delisting failed"
            exit 1
          fi

          echo "=== Testing Error Cases ==="

          # Step 9: Try to list without approval (using user account 3)
          echo "Testing listing without approval (should fail)..."
          LIST_NO_APPROVAL=$(curl -s -X POST "http://localhost:8000/market/list" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 2,
              "price": 1100000000000000000,
              "seller_account": 3
            }')

          echo "List Without Approval Response: $LIST_NO_APPROVAL"

          if echo "$LIST_NO_APPROVAL" | grep -q '"detail"' && echo "$LIST_NO_APPROVAL" | grep -q "approve"; then
            echo "✅ Correctly rejected listing without approval"
          else
            echo "❌ Should have rejected listing without approval"
            exit 1
          fi

          # Step 10: Try to buy non-existent listing
          echo "Testing buying non-existent listing (should fail)..."
          BUY_NONEXISTENT=$(curl -s -X POST "http://localhost:8000/market/buy" \
            -H "Content-Type: application/json" \
            -d '{
              "ticket_id": 999,
              "buyer_account": 2
            }')

          echo "Buy Non-existent Response: $BUY_NONEXISTENT"

          if echo "$BUY_NONEXISTENT" | grep -q '"detail"' || echo "$BUY_NONEXISTENT" | grep -q '"success":false'; then
            echo "✅ Correctly rejected buying non-existent listing"
          else
            echo "❌ Should have rejected buying non-existent listing"
            echo "Note: This may pass if the endpoint handles it gracefully"
          fi

          echo "🎉 All resale market tests completed successfully!"

      - name: Check container logs on failure
        if: failure()
        run: |
          echo "=== API Container Logs ==="
          docker compose logs api

          echo "=== Blockchain Container Logs ==="
          docker compose logs blockchain

          echo "=== Redis Container Logs ==="
          docker compose logs redis

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose down --volumes --remove-orphans
          docker system prune -f
