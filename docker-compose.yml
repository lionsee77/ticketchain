services:
  # FastAPI Application
  api:
    build: 
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - RPC_URL=http://blockchain:8545
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ticketchain:password123@postgres:5432/ticketchain
    volumes:
      - ./app/.env:/app/.env:ro
      - contracts-shared:/app/contracts:ro
    depends_on:
      blockchain:
        condition: service_healthy
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - ticketchain

  # Next.js Frontend Application
  frontend:
    build:
      context: ./frontend/webapp
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/webapp:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - ticketchain
    command: npm run dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ticketchain
      POSTGRES_USER: ticketchain
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticketchain
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketchain -d ticketchain"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Hardhat Blockchain (existing)
  blockchain:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - contracts-shared:/app/shared
    networks:
      - ticketchain
    healthcheck:
      test: ["CMD", "sh", "-c", "test -f /app/shared/EventManagerABI.json && test -f /app/shared/ResaleMarketABI.json && test -f /app/shared/TicketNFTABI.json"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 60s

  # Redis for session/caching
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - ticketchain
    command: redis-server --appendonly yes

volumes:
  contracts-shared:
  postgres_data:
  redis_data:

networks:
  ticketchain:
    driver: bridge